## Tasks and Inputs

```{r}
#| include: false

# source("01_R_Files/helperfunctions.R")
```

- Open the RStudio Project you created [in preparation](#w2-preparation) to this exercise
- Download the new wildboar movement data, and save it to your new project's directory [wildschwein_BE_2056.csv](https://moodle.zhaw.ch/pluginfile.php/1168373/mod_folder/content/0/wildschwein_BE_2056.csv?forcedownload=1)

###### Once you have set everything up, commit your file to your git repo in the following manner: {#sec-commit2}

:::{.callout-note}

## Committing files with git

1. Save your (R/RMarkdown/Quarto) file
2. Switch to the "Git"-Tab in the pane in the top right corner
3. Click "commit" to open the "Commit Window"
4. Click in the checkbox next to the file(s) you want to commit
5. Add a commit message to explain what you are committing (e.g. "`initial commit`")
6. Click on "commit" to commit your changes

:::

To push your changes from our local repo on your computer to the remote repo on Github, simply click the green button "Push" in the Git tab in RStudio. Now take a look at your repository on github.com. Do you see the new files there? Contact us if this does not work.

**Note**: You do not need to push your changes to your remote repo after every commit. It's enough if you do this every few commits.

### Task 1: Import your data {#sec-w2-task1}

Create a new R- (or RMarkdown/Quarto-) file and begin with the following lines of code (adjust the path to your csv file accordingly).

```{r}
#| file: "solutions/week2/task_1.R"
#| echo: true
#| results: "hide"

```

Note: 

- that this dataset is already converted to EPSG 2056
- the coordinates are stored in the columns (`E`/`N`)
- setting `remove = FALSE` preserves the original (`E`/`N`) columns, which come in handy later on

### Task 2: Getting an overview {#sec-w2-task2}

Calculate the time difference between subsequent rows as described in the demo. You can calculate the time difference using the function `difftime()` in combination with `lead()`. 

- the function `difftime()` has an option `units`. Set this to `secs` to get the time difference in seconds
- use `as.integer()` to turn the output returned by `difftime()` into an integer.
- store the output in a new column (e.g. `timelag`)

Now inspect your data in more detail. Try to answer the following questions:

- How many individuals were tracked? 
- For how long were the individual tracked? Are there gaps?
- Were all individuals tracked concurrently or sequentially? 
- What is the temporal sampling interval between the locations?

After completing the task, commit your changes to git using a good commit message (e.g. `completed task 1`).

<!-- Here are some exemplary visualisation you could produce to answer these questions. Can you now answer the above questions? -->

```{r}
#| file: "solutions/week2/task_2.R"
#| echo: false
#| output: false

```

### Task 3: Deriving movement parameters I: Speed {#sec-w2-task3}

In this task we will derive some additional movement parameters from our trajectories. So far our trajectories only consist of a list of time-stamped spatial locations. So let's calculate the animal's steplength based on the Euclidean distance between subsequent locations.

:::{.callout-note}
Since our wildboar data is an `sf` object, we *could* use the function `st_distance` to calulate the distance between locations. However, `st_distance` is not designed for movement data, and using it with our split-apply-combine paradigm turns out to be a bit complicated (checkout the answers to [my Stackoverflow question](https://stackoverflow.com/q/49853696/4139249) posted in 2018).

Luckily, we are working with cartesian coordinates and so can create our own distance function more suited to our use case. If one day you work with geodetic coordinates and need to do something similar, please use one of the solutions provided in the linked stackoverflow questions instead!
:::

You can calculate the Euclidean distance with the following formula: $$\text{distance} = \sqrt{(\text{E1} - \text{E2})^{2}+(\text{N1} - \text{N2})^{2}}$$

- `E1`, `N1` refers to the current location
- `E2`, `N2` refers to the consecutive location
- you can use `lead(E,1)` to address `E2`
- store the output in a new column (e.g. `steplength`)

Now calculate the animals' speed between consecutive locations based on `steplength` and the `timelag` (from the last task). What speed unit do you get?

After completing the task, commit your changes to git using a good commit message.

```{r}
#| file: "solutions/week2/task_3.R"
#| echo: false
#| include: false

```

### Task 4: Cross-scale movement analysis {#sec-w2-task4}

@laube2011 analyse animal movement across different scales (see below). In their paper, the authors suggest reducing the granularity of the data by subsetting the data to every n^th^ element. We will do the same on a dataset that includes 200 locations of a single wild boar with a constant sampling interval of 60 seconds. 

![Black points are used in calculation of movement parameters (e.g. speed) at a given termporal scale (Laube and Purves, 2011)](../02_Images/laube_2011_2.jpg)

Download this dataset here: [caro60.csv](https://moodle.zhaw.ch/pluginfile.php/1168373/mod_folder/content/0/caro60.csv?forcedownload=1). Import it just like you imported the other wild boar data and save it to a new variable named `caro` (note that the locations are stored in EPSG 2056).

Now manually reduce the granularity of our sampling interval by selecting every 3^rd^, 6^th^ and 9^th^ position and save the output to `caro_3`, `caro_6`,`caro_9` accordingly.

Tip: There are many ways to go about this, we recommend using `seq()` where `from = 1`, `to = ` the length of the dataset and `by = n` (i.e. `3`, `6` or `9`). This creates an integer vector that can either used in `dplyr::slice()` or in row subsetting (type `?slice()` or `?"[.data.frame"` to get help on either of these methods). 

```{r}
#| file: "solutions/week2/task_4.R"
#| echo: false
#| include: false

```

You should now have  4 datasets with different number of rows:

```{r}
#| echo: true
#| collapse: true

nrow(caro)
nrow(caro_3)
nrow(caro_6)
nrow(caro_9)
```

Now calculate `timelag`, `steplength` and `speed` for these data sets, just as you did in the [last task](#sec-w2-task3). To finish the task, compare the speeds visually in a line plot and also visualize the trajectories in a map (see examples below). Interpret the line plot, what do the different lines for the different temporal granularities tell you?

After completing the task, commit your changes to git using a good commit message.

```{r}
#| file: "solutions/week2/task_4.R"
#| echo: false

```

### Task 5 (optional): Deriving movement parameters II: Rolling window functions {#sec-w2-task5}

A different approach would be to *smoothen* the derived parameters using a [moving window function](https://docs.wavefront.com/images/5sec_moving_window.png). The `zoo` package offers a variate of moving window functions (`roll_*`). Install this package, load it into the session and use the function `roll_mean()` to smooth the calculated speed. Familiarise yourself with this function by working on some dummy data, for example:

```{r}
#| echo: true

library("zoo")

example <- rnorm(10)
rollmean(example, k = 3, fill = NA, align = "left")
rollmean(example, k = 4, fill = NA, align = "left")
```

Now run `rollmean`on the `speed` variable of the subset (`caro`). Visualize the output from your moving windows and compare different window sizes (`k = `).
After completing the task, commit your changes to git using a good commit message. **Additionally**, push all your commits to your remote repository on Github by clicking the green upwards pointing arrow in the Git pane in RStudio.

```{r}
#| file: "solutions/week2/task_5.R"
#| echo: false
#| include: false

```


### Task 6: Add your movement data to your repository {#sec-w2-task6}

In the semester project, you will analyse your own movement data, either collected with the Posmo App or with the GPS Tracker (see @sec-preperation-project). Acquire this data and save it to a subfolder of your current R Project named `data`. To acquire it, proceed as follows:

- Posmo App Users
  1. Go to [posmo.datamap.io](https://posmo.datamap.io) and choose "Posmo Project"
  2. Click on the download button in the top right corner
  3. Choose an appropriate start and end date for which you want to download the data. Since you want all the data, you can choose 1. January until today
  4. Click on download
  5. Move the file from your downloads folder to the subfolder `data` in your current RStudio Project
- GPS Logger Users: Bring us your logger, we will extract your data and send it to you.


:::{.callout-important}

**DO NOT COMMIT ANYTHING YET**. Since your movement data is sensitive, personal information, we do not recommend pushing it to a public GitHub repo. 

First, check if Git recognized your added file by having a look at the Git Pane in RStudio. Do you see your file there? If you do, good. If you don't, get in touch with us.

Now, to prevent Git from publishing your data to GitHub, create a new text file in RStudio (click on File → New File → Text File). In this file, add the name of your data-folder (e.g. `data/`), then save the file with the name `.gitignore` in your project folder. Git will ignore all files and folders listed in this file.

To make sure it worked, check the Git Pane of Rstudio. Do you see your movement data listed here? If not, it worked! If you still see it there, get in touch wih us. 
:::



### Task 7: Explore your movement data {#sec-w2-task7}

Now, import your data in the same way you imported the the wild boar data in [task 1](#sec-w2-task1). Next, start exploring your data, similarly as you did in [task 2](#sec-w2-task2). At a minimum:

- Import your data as a data frame and convert it to an `sf` object, using the correct CRS information
- Convert your data to `CH1903+ LV95`
- Make a map of your data using `ggplot2` or `tmap`.



### Submission

To submit your exercise, provide us with the URL of your Github repo as described [in the preperation](#create-github-repo).

You can give other GitHub users write access to your repository throught the repository settings. You will be needing this for your semester project. To practice this, add Dominik ([\@DLND8](https://github.com/DLND8/)) and Nils ([\@ratnanil](https://github.com/ratnanil/)) to your GitHub repo: 

1. Go to your GitHub repository on GitHub.com
2. Go to the repository settings by clicking on the *Settings* tab
3. In the left panel, click on *Collaborators and teams* and then *Add people*
4. Add the mentioned Persons via their GitHub Usernames, give them *Write* privilages. 
