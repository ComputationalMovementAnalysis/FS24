{
  "hash": "0385ec367eed5bafbb0eb014390e1b24",
  "result": {
    "engine": "knitr",
    "markdown": "## Tasks and Inputs\n\n\n- Create a new RStudio Project for this exercise (see @sec-create-rstudio-project)\n- Download the new wildboar movement data, and save it to your new project's directory [wildschwein_BE_2056.csv](https://moodle.zhaw.ch/mod/folder/view.php?id=1192125)\n\n\n\n### Task 1: Import your data {#sec-w2-task1}\n\nCreate a new R-file and import the wildboar data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"readr\")\nlibrary(\"sf\")\n\nwildschwein_BE <- read_delim(\"datasets/wildschwein_BE_2056.csv\", \",\")\n\nwildschwein_BE <- st_as_sf(wildschwein_BE, coords = c(\"E\", \"N\"), crs = 2056, remove = FALSE)\n```\n:::\n\n\nNote: \n\n- that this dataset is already converted to EPSG 2056\n- the coordinates are stored in the columns (`E`/`N`)\n- setting `remove = FALSE` preserves the original (`E`/`N`) columns, which come in handy later on\n\n### Task 2: Getting an overview {#sec-w2-task2}\n\nCalculate the time difference between subsequent rows as described in the demo. You can calculate the time difference using the function `difftime()` in combination with `lead()`. \n\n- the function `difftime()` has an option `units`. Set this to `secs` to get the time difference in seconds\n- store the output in a new column (e.g. `timelag`)\n\nNow inspect your data in more detail. Try to answer the following questions:\n\n- How many individuals were tracked? \n- For how long were the individual tracked? Are there gaps?\n- Were all individuals tracked concurrently or sequentially? \n- What is the temporal sampling interval between the locations?\n\n\n<!-- Here are some exemplary visualisation you could produce to answer these questions. Can you now answer the above questions? -->\n\n\n::: {.cell}\n\n:::\n\n\n### Task 3: Deriving distance & speed {#sec-w2-task3}\n\nIn this task we will derive some additional movement parameters from our trajectories. So far our trajectories only consist of a list of time-stamped spatial locations. First let's calculate the Euclidean distance between subsequent locations using the function `st_distance()` with the option `by_element = TRUE`. Store these values in a new column with the name `steplength`.\nNext, you can calculate the animals' speed based on `steplength` and the `timelag` (from the last task).\n\n\n\n<!-- :::{.callout-note}\nSince our wildboar data is an `sf` object, we *could* use the function `st_distance` to calulate the distance between locations. However, `st_distance` is not designed for movement data, and using it with our split-apply-combine paradigm turns out to be a bit complicated (checkout the answers to [my Stackoverflow question](https://stackoverflow.com/q/49853696/4139249) posted in 2018).\n\nLuckily, we are working with cartesian coordinates and so can create our own distance function more suited to our use case. If one day you work with geodetic coordinates and need to do something similar, please use one of the solutions provided in the linked stackoverflow questions instead!\n::: -->\n\n\n\n\n\n\n\n\n### Task 4: *Speed* at different scales {#sec-w2-task4}\n\nIn preperation, you've read the paper by @laube2011. In this paper, they analyse speed at different scales and compare these. Let's reproduce what was done in the paper with cows to data of a moving wildboar named *Caro*. Download this dataset here: [caro60.csv](https://moodle.zhaw.ch/mod/folder/view.php?id=1192125). This dataset includes 200 locations of a single wild boar with a constant sampling interval of 60 seconds. Import it just like you imported the other wild boar data and save it to a new variable named `caro` (note that the locations are stored in EPSG 2056).\n\n\n\n::: {#fig-laube2011}\n\n![](../02_Images/laube_2011_2.jpg)\n\nBlack points are used in calculation of movement parameters (e.g. speed) at a given termporal scale (from @laube2011)\n:::\n\n@fig-laube2011 shows how speed was calulated at three different scales. Let's look at scale 1 first, where every location is included. For our data, this would mean a sampling window $w$ of 120 seconds. The speed for a given sample (i.e. location) $t_{x}$ is the time difference between $t_{x-1}$ and $t_{x+1}$ divided by the distance  $t_{x-1}$ to  $t_{x+1}$ via  $t_{x}$.\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\nTry to implement this in `R`\n\n:::{.callout-important}\n\n## TODO\n\nMake this exercise match @laube2011 better. The next two instructions are not correct\n\n\n> Now manually reduce the granularity of our sampling interval by selecting every 3^rd^, 6^th^ and 9^th^ position and save the output to `caro_3`, `caro_6`,`caro_9` accordingly.\n> Tip: There are many ways to go about this, we recommend using `seq()` where `from = 1`, `to = ` the length of the dataset and `by = n` (i.e. `3`, `6` or `9`). This creates an integer vector that can either used in `dplyr::slice()` or in row subsetting (type `?slice()` or `?\"[.data.frame\"` to get help on either of these methods). \n:::\n\n\n\n\n\n\n\nYou should now have  4 datasets with different number of rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(caro)\n## [1] 200\nnrow(caro_3)\n## [1] 67\nnrow(caro_6)\n## [1] 34\nnrow(caro_9)\n## [1] 23\n```\n:::\n\n\nNow calculate `timelag`, `steplength` and `speed` for these data sets, just as you did in the [last task](#sec-w2-task3). To finish the task, compare the speeds visually in a line plot and also visualize the trajectories in a map (see examples below). Interpret the line plot, what do the different lines for the different temporal granularities tell you?\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 67 × 6\n   TierID TierName CollarID DatetimeUTC                E        N\n   <chr>  <chr>       <dbl> <dttm>                 <dbl>    <dbl>\n 1 010C   Caro        13973 2015-09-15 08:07:00 2570589. 1205095.\n 2 010C   Caro        13973 2015-09-15 08:10:00 2570518. 1205115.\n 3 010C   Caro        13973 2015-09-15 08:13:00 2570482. 1205124.\n 4 010C   Caro        13973 2015-09-15 08:16:00 2570490. 1205100.\n 5 010C   Caro        13973 2015-09-15 08:19:00 2570497. 1205092.\n 6 010C   Caro        13973 2015-09-15 08:22:00 2570499. 1205091.\n 7 010C   Caro        13973 2015-09-15 08:25:00 2570500. 1205087.\n 8 010C   Caro        13973 2015-09-15 08:28:00 2570496. 1205094.\n 9 010C   Caro        13973 2015-09-15 08:31:00 2570497. 1205091.\n10 010C   Caro        13973 2015-09-15 08:34:00 2570499. 1205091.\n# ℹ 57 more rows\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](3_tasks_and_inputs_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](3_tasks_and_inputs_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](3_tasks_and_inputs_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](3_tasks_and_inputs_files/figure-html/unnamed-chunk-7-4.png){width=672}\n:::\n:::\n\n\n\n### Task 6: Add your movement data to your repository {#sec-w2-task6}\n\nIn the semester project, you will analyse your own movement data, either collected with the Posmo App or with the GPS Tracker (see @sec-preperation-project). Acquire this data and save it to a subfolder of your current R Project named `data`. To acquire it, proceed as follows:\n\n\n:::{.callout-important}\n\n## TODO ⚠️\n\nChange the instructions to match FS24\n\n:::\n\n- Posmo App Users\n  1. Go to [posmo.datamap.io](https://posmo.datamap.io) and choose \"Posmo Project\"\n  2. Click on the download button in the top right corner\n  3. Choose an appropriate start and end date for which you want to download the data. Since you want all the data, you can choose 1. January until today\n  4. Click on download\n  5. Move the file from your downloads folder to the subfolder `data` in your current RStudio Project\n- GPS Logger Users: Bring us your logger, we will extract your data and send it to you.\n\n<!-- :::{.callout-important}\n\nTODO: Move this to an appropriate location\n\n**DO NOT COMMIT ANYTHING YET**. Since your movement data is sensitive, personal information, we do not recommend pushing it to a public GitHub repo. \n\nFirst, check if Git recognized your added file by having a look at the Git Pane in RStudio. Do you see your file there? If you do, good. If you don't, get in touch with us.\n\nNow, to prevent Git from publishing your data to GitHub, create a new text file in RStudio (click on File → New File → Text File). In this file, add the name of your data-folder (e.g. `data/`), then save the file with the name `.gitignore` in your project folder. Git will ignore all files and folders listed in this file.\n\nTo make sure it worked, check the Git Pane of Rstudio. Do you see your movement data listed here? If not, it worked! If you still see it there, get in touch wih us. \n::: -->\n\n### Task 7: Explore your movement data {#sec-w2-task7}\n\nNow, import your data in the same way you imported the the wild boar data in [task 1](#sec-w2-task1). Next, start exploring your data, similarly as you did in [task 2](#sec-w2-task2). At a minimum:\n\n- Import your data as a data frame and convert it to an `sf` object, using the correct CRS information\n- Convert your data to `CH1903+ LV95`\n- Make a map of your data using `ggplot2` or `tmap`.\n\n\n",
    "supporting": [
      "3_tasks_and_inputs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}