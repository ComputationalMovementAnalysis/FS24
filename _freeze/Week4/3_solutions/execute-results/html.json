{
  "hash": "14bd55c6e65d9f4526e893263600b2d1",
  "result": {
    "engine": "knitr",
    "markdown": "## Solutions\n\n:::{.callout-tip}\nHover over the code and copy the content by clicking on the clipboard icon on the top right. You can now paste this into an R-Script.\n:::\n\nThe code examples for task 1 - 4 was done using a posmo dataset. If you used another dataset (Strava, Google Timeline, etc.) your code can look a bit different.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```{.sourceCode .r}\n# task_1.R\n################################################################################\n\n\neuclid <- function(x, y, n = 1) {\n  sqrt((x - lead(x, n))^2 + (y - lead(y, n))^2)\n}\n\n# with R's new shorthand:\n\neuclid <- \\(x,y,n = 1) sqrt((x - lead(x, n))^2 + (y - lead(y, n))^2)\n\n\n\n\n# task_2.R\n################################################################################\n\n\n\nlibrary(\"readr\")  # move this to the top of your script\nlibrary(\"dplyr\")  # move this to the top of your script\n\nwildschwein <- read_delim(\"datasets/wildschwein_BE_2056.csv\", \",\")\n\nwildschwein_filter <- wildschwein |>\n       filter(\n              DatetimeUTC >= as.POSIXct(\"2015-04-01 00:00:00\",tz = \"UTC\"),\n              DatetimeUTC <= as.POSIXct(\"2015-04-15 23:59:59\",tz = \"UTC\")\n       ) |>\n       filter(TierName %in% c(\"Rosa\", \"Sabi\"))\n\n\n\n\n# task_3.R\n################################################################################\n\n\nwildschwein_filter <- wildschwein_filter |>\n  group_by(TierID) |>\n  mutate(\n    DatetimeRound = lubridate::round_date(DatetimeUTC, \"15 minutes\")\n  )\n\nhead(wildschwein_filter)\n\n\n\n\n# task_4.R\n################################################################################\n\n\nlibrary(\"purrr\") # move this to the top of your script\n\nsabi <- wildschwein_filter |>\n  filter(TierName == \"Sabi\")\n\nrosa <- wildschwein_filter |>\n  filter(TierName == \"Rosa\")\n\nwildschwein_join <- full_join(sabi, rosa, by = c(\"DatetimeRound\"), suffix = c(\"_sabi\", \"_rosa\"))\n\nwildschwein_join <- wildschwein_join |>\n  mutate(\n    distance = sqrt((E_rosa - E_sabi)^2 + (N_rosa - N_sabi)^2),\n    meet = distance < 100\n  )\n\n\n\n\n# task_5.R\n################################################################################\n\n\nlibrary(\"ggplot2\")  # move this to the top of your script\n\n\nwildschwein_meet <- wildschwein_join |>\n  filter(meet)\n\nggplot(wildschwein_meet) +\n  geom_point(data = sabi, aes(E, N, colour = \"sabi\"), shape = 16, alpha = 0.3) +\n  geom_point(data = rosa, aes(E, N, colour = \"rosa\"), shape = 16, alpha = 0.3) +\n  geom_point(aes(x = E_sabi, y = N_sabi, fill = \"sabi\"), shape = 21) +\n  geom_point(aes(E_rosa, N_rosa, fill = \"rosa\"), shape = 21) +\n  labs(color = \"Regular Locations\", fill = \"Meets\") +\n  coord_equal() +\n  theme_minimal()\n\n\n\n\n# task_6.R\n################################################################################\n\n\nmeanmeetpoints <- wildschwein_join |>\n  filter(meet) |>\n  mutate(\n    E.mean = (E_rosa + E_sabi) / 2,\n    N.mean = (N_rosa + N_sabi) / 2\n  )\n\nlibrary(\"plotly\")  # move this to the top of your script\n\n\n# plot_ly(wildschwein_join, x = ~E_rosa, y = ~N_rosa, z = ~DatetimeRound, type = \"scatter3d\", mode = \"lines\") |>\n#   add_trace(wildschwein_join, x = ~E_sabi, y = ~N_sabi, z = ~DatetimeRound) |>\n#   add_markers(data = meanmeetpoints, x = ~E.mean, y = ~N.mean, z = ~DatetimeRound) |>\n#   layout(scene = list(\n#     xaxis = list(title = \"E\"),\n#     yaxis = list(title = \"N\"),\n#     zaxis = list(title = \"Time\")\n#   ))\n\n\nwildschwein_join |>\n  filter(DatetimeRound < \"2015-04-04\") |>\n  plot_ly(x = ~E_rosa, y = ~N_rosa, z = ~DatetimeRound, type = \"scatter3d\", mode = \"lines\") |>\n  add_trace(wildschwein_join, x = ~E_sabi, y = ~N_sabi, z = ~DatetimeRound) |>\n  add_markers(data = meanmeetpoints, x = ~E.mean, y = ~N.mean, z = ~DatetimeRound) |>\n  layout(scene = list(\n    xaxis = list(title = \"E\"),\n    yaxis = list(title = \"N\"),\n    zaxis = list(title = \"Time\")\n  ))\n\n\n\n\n# task_7.R\n################################################################################\n\n\n\n\nlibrary(\"sf\")  # move this to the top of your script\n\nposmo <- read_csv(\"datasets/posmo_2022-05-01T00 00 00+02 00-2023-04-18T23 59 59+02 00.csv\") |>\n    select(datetime, lon_x, lat_y) |>\n    mutate(hour = hour(datetime) + minute(datetime)/60 + second(datetime)/3600)   |>\n    st_as_sf(coords = c(\"lon_x\",\"lat_y\"), crs = 4326) |>\n    st_transform(2056)\n\n\nposmo <- cbind(st_drop_geometry(posmo), st_coordinates(posmo))\n\n\nposmo <- posmo |>\n    mutate(\n        hour = hour(datetime) + minute(datetime)/60,\n        hour_round = round(hour/0.25)*0.25\n        )  \n\nday1 <- posmo |>\n    filter(as.Date(datetime) == as.Date(\"2022-11-29\"))\n\nday2 <- posmo |>\n    filter(as.Date(datetime) == as.Date(\"2022-12-01\"))\n\n\nrecurrance <- inner_join(day1, day2, by = \"hour_round\",suffix = c(\"1\",\"2\")) |>\n    mutate(\n        dist = sqrt((X1-X2)^2 + (Y1-Y2)^2)\n    ) |>\n    filter(dist < 100)\n\n\nggplot() +\ngeom_point(data = day1, aes(X, Y, color = \"day1\")) +\ngeom_point(data = day2, aes(X, Y, color = \"day2\")) +\ngeom_point(data = recurrance, aes(X1,Y1, color = \"recurrance\"))\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}