{
  "hash": "45019b6a08217c9bd2ae1ac6262b4f34",
  "result": {
    "engine": "knitr",
    "markdown": "# Appendix\n\n## Data-import: base-r vs `readr` {#sec-readr}\n\n\nOur reasons for preferring `readr` over base-R import functions:\n\n1. ~~base `R` imports strings as factors by default~~ (since R 4.0.0, this is not the case anymore)\n2. `readr` is generally faster (which only matters if you have a large dataset)\n3. `readr` makes safer assumptions about your data (e.g. the default timezone for datetime columns is UTC)\n4. `data.frames` created by `readr` are prettier when printed to the console and contain more information using less characters\n\n**HOWEVER**: Using external libraries (such as `readr`) creates additional dependencies which has it's own downsides (which is one of the reasons we don't do `library(\"tidyverse\")`). \n\n\n\n## Comitting files with git\n\n\n:::{#nte-committing .callout-note}\n## Committing files with git\n\n1. Save your (R/RMarkdown/Quarto) file\n2. Switch to the \"Git\"-Tab in the pane in the top right corner\n3. Click \"commit\" to open the \"Commit Window\"\n4. Click in the checkbox next to the file(s) you want to commit\n5. Add a commit message to explain what you are committing (e.g. \"`initial commit`\")\n6. Click on \"commit\" to commit your changes\n:::\n\n\n## Mapmatching GPS points to the road network\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tmap)\n\n# Get a sample road dataset\nHighWays <- read_sf(system.file(\"sqlite/test3.sqlite\",package=\"sf\"), \"HighWays\")[6, ] \n\n# since we want to find the closest location on the road over ALL roads\n# we need to create a union of the roads first.\nHighWays <- st_union(HighWays)\n\n# Let's simulate 1000 GPS locations within 3km of the highway\ngps_locations <- HighWays |> st_buffer(3000) |> st_sample(100)\n\n# Now we can get the nearset point for each GPS location\nnearest <- st_nearest_points(gps_locations, HighWays)\n\n# The output is a line for each point (see plot below)\n# Now we need convert the output from LINE to POINT. \n# This doubles the number of features\nnear_p <- st_cast(nearest, \"POINT\")\n\n# now we subset the points. Uneven numbers are the original\n# points, even numbers are the new, mapmatched points.\nnear_from <- near_p[c(TRUE, FALSE)]\nnear_to <- near_p[c(FALSE,TRUE)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HighWays) + tm_lines() +\n  tm_shape(nearest) + tm_lines(lty = 3) +\n  tm_shape(near_from) + tm_dots() +\n  tm_shape(near_to) + tm_dots(col = \"red\")\n```\n\n::: {.cell-output-display}\n![Original Points (black) are matched to the closest point on the road (red)](Appendix_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::",
    "supporting": [
      "Appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}